#! /usr/bin/perl

# distribute-cache-batch
#
# Make a domain cache batch available to the apps that need it, where
# they need it -- whether off site, on site but on a different cluster,
# or locally on this machine.
#
# Usage: distribute-cache-batch -b <batchId> [-c <cluster> [-t <transferNode>]] [-j <jmsTopic>] [-d]
#
# <batchId> is the name of the cache data file that has been created by
# domain serializer under /srv/cache, i.e.
# /srv/cache/AdserverDomainCache-default-20110428130827.dat
#
# <cluster> is the optional prefix/name of the server cluster to which
# the given batch should be pushed, i.e. "rfadserver" or "dc1".  This
# prefix should correspond to func minions when wildcarded.  When this
# option is omitted, no batch transfer is done at all.
#
# <transferNode> is the optional server to which the batch will be
# pushed first, and then UFTP'd from there.  When omitted, but when a
# cluster is specified, the batch will be transferred directly to the
# given cluster.
#
# <jmsTopic> is the optional name of the JMS topic to which a message
# (containing the batch id) will be published once distribution is done.
# When omitted, no JMS notification is published.
#
# The -d argument, when present, will force the cache file to be
# deleted once it has been distributed successfully.  This is used
# primarily in production only at this point.  In test and local
# development setups, the same cache dir is shared by DS and the apps,
# so we want to leave the cache files around in that scenario, and
# the apps will take care of cleaning up old batches periodically.

$|++;

use strict;
use warnings;
use Getopt::Long;
use Log::Log4perl;
use JSON;
use File::Basename;
use File::Pid;
use Sys::Hostname;
use LWP::UserAgent;

# This sets up the same sort of one-line logging format we use in all of
# our other apps.  This will enable us to use the java-log-scavenger on
# this script's output/log in order to detect errors.
Log::Log4perl::init(\q(
log4perl.category.Local = INFO, Screen
log4perl.appender.Screen = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.stderr = 0
log4perl.appender.Screen.layout = Log::Log4perl::Layout::PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = %p; %d{MMM d, yyyy H:mm:ss a}; tid:%P; %m%n
));
my $logger = Log::Log4perl::get_logger("Local");

# Load multicast config
my @mcastConfigRules = readMCastConfig("/usr/local/adfonic/config/distribute-cache-batch.config");


# Run a command on one or more minions via func, and ensure that it
# completed successfully on each minion specified.
# Args: <minionSpec> <command>
# ...where <minionSpec> may be a single minion, or a wildcarded pattern
# such as "dc1*", or a func group such as "@rfadserver"
sub func {
    my ($minionSpec, $command) = @_;
    #$logger->debug("Running command on $minionSpec: $command");

    # Use call --json so it returns a chunk of JSON-ish stuff for each node.
    my $funcCommand = "func -t 60 \"$minionSpec\" call --json command run \"$command\"";
    
    # Process the output and bail if anything went wrong
    my $numFailures=0;
    $logger->debug($funcCommand);

    my $jsonParser = new JSON;
    
    open(FUNC, '-|', $funcCommand) or die "Failed to open func command (Error: $!)";
    while (<FUNC>) {
        chomp($_);
        $logger->debug("func return result: $_");
        my $json = $jsonParser->decode($_);
        my $node = @$json[0];
        my $results = @$json[1];
        my $exitCode = @$results[0];
        if ($exitCode ne 0) {
            my $stdout = @$results[1];
            my $stderr = @$results[2];
            chomp($stdout);
            chomp($stderr);
            $logger->error("command failed on $node (exitCode=$exitCode): $command, stdout=$stdout, stderr=$stderr");
            $numFailures++;
        }
    }
    $logger->debug("num failures: $numFailures");
    return $numFailures;
}

sub usage {
    if (@_) {
        print "Unknown option: @_\n";
    }
    print "usage: $0 -b <batchId> -c <cluster> -t <transferNode> [-j <jmsTopic>] [-d]\n";
    exit;
}

# Grab command line args
my $batchId;
my $cluster;
my $transferNode;
my $jmsTopic;
my $deleteAfterDistributed = 0;

usage() if @ARGV < 1;
usage() if !GetOptions("batchId=s" => \$batchId,
                       "cluster=s" => \$cluster,
                       "transferNode=s" => \$transferNode,
                       "jmsTopic=s" => \$jmsTopic,
                       "deleteAfterDistributed!" => \$deleteAfterDistributed);
usage() if !defined($batchId);

# Make sure the specified cache file exists
my $cacheFileName = "$batchId.dat";
my $cacheFileFullPath = "/srv/cache/$cacheFileName";
die "Cache file not found: $cacheFileFullPath" if (! -f $cacheFileFullPath);

my $pidFile;
if (defined($cluster)) {
    # Make sure this script isn't already running for the given cache and
    # shard/cluster combo.  We do that on a per-cache-per-cluster basis,
    # since it's totally ok for multiple instances of this script to be
    # running for different caches and/or different shards/clusters.
    # Figure out the cache type and cluster by looking at the batch id, which
    # we expect to be in a format like:
    #      <cacheType>-<shard>-<timestamp>
    # i.e. AdserverDomainCache-default-20110418122114
    # i.e. AdserverDomainCache-mobclix-20110418122114
    # i.e. AdserverDomainCache-smaato-20110418122114
    # i.e. AdserverDomainCache-shard-rtb-20110418122114
    if ($batchId =~ /^([^-]+)-([^-]+)-.+$/) {
        my $cacheType = $1;
        my $shard = $2;
        my $scriptName = basename($0);
        $pidFile = File::Pid->new({ file => "/var/run/adfonic/" . $scriptName . "-" . $cacheType . "-" . $shard . "-" . $cluster . ".pid", pid => $$ });
        if ($pidFile->running) {
            $logger->error("$scriptName is already running for $cacheType-$shard -> $cluster");
            exit 1;
        }
        # Write our pid to the pid file
        $logger->debug("Writing PID file for $cacheType-$shard -> $cluster");
        $pidFile->write;
    } else {
        # Weird...
        $logger->warn("Unrecognized batchId format: $batchId");
    }

    # Gzip the cache file
    my $gzFileName = $batchId . ".dat.gz";
    my $gzFullPath = "/srv/cache/$gzFileName";
    $logger->debug("Gzipping cache file to: $gzFullPath");
    system("gzip -c $cacheFileFullPath > $gzFullPath");

    my $numFailures;
    my $sourceHost = hostname;
    $logger->debug("Using source hostname: $sourceHost");

    # See if we need to do the two-phase rsync+UFTP transfer...
    if (defined($transferNode)) {
        # Use cache-specific public/private multicast addresses so different
        # simultaneous transfers don't collide
        my ($pubMulticastAddr, $privMulticastAddr) = getMCastAddresses($batchId);

        $logger->info("Issuing two-phase transfer of $batchId via $transferNode (pub: $pubMulticastAddr, priv: $privMulticastAddr)");
        $numFailures = func($transferNode,
                            # Transfer the gzipped file over -- WITHOUT compression (already gzipped)
                            "rsync -a $sourceHost" . "::cache/$gzFileName /tmp/"
                            # UFTP the gzipped file out to all nodes in the cluster.
                            # We use our custom UFTP wrapper script here, so that the systems team
                            # can control how UFTP gets invoked, add tolerance for failed nodes, etc.
                            . " && /usr/local/bin/adf-uftp-wrapper -M $pubMulticastAddr -P $privMulticastAddr -f /tmp/$gzFileName"
                            # Delete the tarball from the receiving directory once the UFTP is done
                            . " && rm -f /tmp/$gzFileName");
        
        # Delete the gzipped file, no need to keep that around
        $logger->debug("Deleting: $gzFullPath");
        system("rm -f $gzFullPath");

        if ($numFailures > 0) {
            $logger->error("Failed to push batch $batchId to transfer node: $transferNode");
            if ($deleteAfterDistributed) {
                $logger->debug("Deleting: $cacheFileFullPath");
                system("rm -f $cacheFileFullPath");
            }
            die "Exiting";
        }

        # Unzip/untar the new batch
        $logger->info("Unzipping $batchId on the $cluster cluster...");
        $numFailures = func("@" . $cluster,
                            # First make sure the "incoming" dir exists
                            "mkdir -p /mnt/data/cache/incoming/"
                            # Move the .gz, which we expect to be in /var/tmp, to the incoming dir
                            . " && mv /var/tmp/$gzFileName /mnt/data/cache/incoming"
                            # Unzip the cache file .gz in place in the incoming dir
                            . " && gzip -d /mnt/data/cache/incoming/$gzFileName");
        $logger->debug("func cluster call to extract tarball complete");
        $logger->debug("func cluster call to extract tarball complete");
        if ($numFailures > 0) {
            $logger->error("Exiting due to $numFailures failure(s) unzipping $batchId on the $cluster cluster");
            if ($deleteAfterDistributed) {
                $logger->debug("Deleting: $cacheFileFullPath");
                system("rm -f $cacheFileFullPath");
            }
            die "Exiting";
        }
    } else {
        # No transfer node...just distribute the batch directly
        $logger->info("Distributing $batchId directly to the $cluster cluster");
        # Push the batch to the "incoming" subdir on each server in the cluster.
        # We only push it to "incoming" for now, and we'll activate it by moving
        # it into the live dir once all servers have successfully gotten the batch.
        $logger->info("Pushing $batchId to $cluster cluster...");
        $numFailures = func("@" . $cluster,
                            # First make sure the "incoming" dir exists
                            "mkdir -p /mnt/data/cache/incoming/"
                            # Transfer the gzipped file over -- WITHOUT compression (already gzipped)
                            . " && rsync -a $sourceHost" . "::cache/$gzFileName /mnt/data/cache/incoming/"
                            # Unzip the cache file .gz in place
                            . " && gzip -d /mnt/data/cache/incoming/$gzFileName");

        # Delete the gzipped file, no need to keep that around
        $logger->debug("Deleting: $gzFullPath");
        system("rm -f $gzFullPath");

        if ($numFailures > 0) {
            $logger->error("Exiting due to $numFailures failure(s) distributing to the $cluster cluster");
            if ($deleteAfterDistributed) {
                $logger->debug("Deleting: $cacheFileFullPath");
                system("rm -f $cacheFileFullPath");
            }
            die "Exiting";
        }
    }
    
    # Activate the new batch
    $logger->info("Activating $batchId on the $cluster cluster...");
    $numFailures = func("@" . $cluster, "mv /mnt/data/cache/incoming/$cacheFileName /mnt/data/cache/");
    if ($numFailures > 0) {
        $logger->error("Exiting due to $numFailures failure(s) activating $batchId on the $cluster cluster");
        if ($deleteAfterDistributed) {
            $logger->debug("Deleting: $cacheFileFullPath");
            system("rm -f $cacheFileFullPath");
        }
        die "Exiting";
    }

    $logger->debug("Distributed $batchId to the $cluster cluster successfully");
} else {
    $logger->debug("No cluster specified, not doing any distribution");
}

# Send a JMS message to announce the changes, if applicable
if (defined($jmsTopic)) {
    $logger->info("Publishing message \"$batchId\" to JMS topic: $jmsTopic");

    # Use ActiveMQ REST to publish the JMS message.
    # To do that we need to grab the base URL from properties.
    my $propertiesFile = "/usr/local/adfonic/config/adfonic-domainserializer.properties";
    my $jmsRestBaseUrl;
    open PROPERTIES, $propertiesFile or die $!;
    while (<PROPERTIES>) {
        chomp($_);
        if ($_ =~ /^jms\.rest\.baseUrl=(.+)$/) {
            $jmsRestBaseUrl = $1;
            last;
        }
    }
    close PROPERTIES;
    if (!defined($jmsRestBaseUrl)) {
        $logger->error("jms.rest.baseUrl not defined in $propertiesFile");
        die "Exiting";
    }

    # Build the full ActiveMQ REST URL, appending the topic name, etc.
    my $jmsRestUrl = $jmsRestBaseUrl . $jmsTopic . "?type=topic";
    $logger->info("Posting message to $jmsRestUrl");

    # Do the HTTP POST to the ActiveMQ REST URL
    my $ua = LWP::UserAgent->new;
    $ua->post($jmsRestUrl, { "body" => $batchId });
}
    
# If we've been instructed to delete the batch locally after we're done
# distributing it, take care of that now.
if ($deleteAfterDistributed) {
    $logger->debug("Deleting: $cacheFileFullPath");
    system("rm -f $cacheFileFullPath");
}

# Keep track of the latest batch id to make it available for healthcheck versioning.
my $cacheNameForVersionTracking;
if ($batchId =~ /^([^-]+)-(.+)-([^-]+)$/) {
    $cacheNameForVersionTracking = "$1-$2"; # cacheType-shard
} else {
    # Weird...
    $logger->error("Unrecognized batchId format: $batchId (can't track version for healthcheck)");
}
if (defined($cacheNameForVersionTracking)) {
    system("mkdir -p /srv/cache/healthcheck");
    my $versionFile = "/srv/cache/healthcheck/$cacheNameForVersionTracking.txt";
    $logger->debug("Writing version to: $versionFile");
    if (!open(VERSION_FILE, ">", $versionFile)) {
        $logger->error("Failed to write version to: $versionFile (Error: $!)");
    } else {
        print VERSION_FILE $batchId;
        close(VERSION_FILE);
    }
}

if ($pidFile) {
    $logger->debug("Removing pid file");
    $pidFile->remove;
}

sub readMCastConfig {
    # Quick hack for now
    my @rules;
    my ($file) = @_;
    unless ( open(FILE, "<$file") ) {
        $logger->warn(sprintf("Can't open config file: %s", $file));
        return ();
    }
    while ( my $line = <FILE> ) {
        chomp($line);
        # Skip comments and empty lines
        next if $line =~ m/^\s*#/;
        next if $line =~ m/^\s?$/;
        # Else expect a pair of IP addresses in dotted quad format
        # and regex string separated by spaces
        my ($pubIP, $privIP, $regex) = split(" ", $line, 3);
        if ( ! ($pubIP && $privIP && $regex) ) {
            $logger->error("Error reading rule. Skipping $line");
            next;
        }
        push(@rules, [$regex, $pubIP, $privIP]);
    }
    close(FILE);
    return @rules;
}
sub getMCastAddresses {
    my ($batchId) = @_;
    foreach my $configRule (@mcastConfigRules) {
        my ($regex, $pubIP, $privIP) = @$configRule;
        return ($pubIP, $privIP) if $batchId =~ m/$regex/;
    }
    $logger->error("No rules matched. Returning default multicast addresses!");
    return ("230.4.5.254", "230.5.5.254");
}
