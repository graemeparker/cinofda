package com.adfonic.tools.beans.session;

import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import com.adfonic.tools.beans.util.Constants;
import com.adfonic.tools.beans.util.GenericAbstractBean;

@Component
@Scope("session")
public class NavigationSessionBean extends GenericAbstractBean implements Serializable {

    /**
     * Generated by Eclipse
     */
    private static final long serialVersionUID = 5365663306212232374L;

    private Map<String, String> menuStyleClass = new HashMap<String, String>(0);

    public NavigationSessionBean() {
        super();
    }

    public void navigate(String navigateTo) {
        if (!StringUtils.isEmpty(navigateTo)) {
            switch (navigateTo) {
            case Constants.ADD_CAMPAIGN:
                menuStyleClass.clear();
                menuStyleClass.put("addcampaign", "currentPage");
                break;
            case Constants.ADD_PUBLICATION:
                menuStyleClass.clear();
                menuStyleClass.put("addpublication", "currentPage");
                break;
            case Constants.OPTIMISATION:
                menuStyleClass.clear();
                menuStyleClass.put("optimisation", "currentPage");
                break;
            case Constants.AUDIENCE_BUILDER:
                menuStyleClass.clear();
                menuStyleClass.put("audiencebuilder", "currentPage");
                break;
            case Constants.REPORTING:
                menuStyleClass.clear();
                menuStyleClass.put("reporting", "currentPage");
                break;
            case Constants.TRANSACTIONS:
                menuStyleClass.clear();
                menuStyleClass.put("transactions", "currentPage");
                break;
            case Constants.DASHBOARD:
                menuStyleClass.clear();
                menuStyleClass.put("dashboard", "currentPage");
                break;
            case Constants.ACCOUNT_DETAILS:
                menuStyleClass.clear();
                menuStyleClass.put("accountdetails", "currentPage");
                break;
            default:
                break;
            }
        }
    }

    public Map<String, String> getMenuStyleClass() {
        return menuStyleClass;
    }

    public void setMenuStyleClass(Map<String, String> menuStyleClass) {
        this.menuStyleClass = menuStyleClass;
    }

    public String tabClass(String id) {
        if (menuStyleClass.isEmpty()) {
            init();
        }
        if (menuStyleClass.containsKey(id)) {
            return menuStyleClass.get(id);
        }
        return "";
    }

    public String gotoAdvertiserDashboard() {
        navigate(Constants.DASHBOARD);
        return Constants.P_DASHBOARD_ADVERTISER;
    }

    public String gotoPublisherDashboard() {
        navigate(Constants.DASHBOARD);
        return Constants.P_DASHBOARD_PUBLISHER;
    }

    public String gotoOptimisation() {
        navigate(Constants.OPTIMISATION);
        return Constants.P_OPTIMISATION_ADVERTISER;
    }

    public String gotoAudienceBuilder() {
        navigate(Constants.AUDIENCE_BUILDER);
        return Constants.P_AUDIENCE_BUILDER;
    }

    public String gotoAdvertiserReporting() {
        navigate(Constants.REPORTING);
        return Constants.P_REPORTING_ADVERTISER;
    }

    public String gotoTransactions() {
        navigate(Constants.TRANSACTIONS);
        return Constants.P_TRANSACTIONS_REDIRECT;
    }

    public String gotoPublisherTransactions() {
        navigate(Constants.TRANSACTIONS);
        return Constants.P_TRANSACTIONS_PUBLISHER;
    }

    public String gotoAccountDetails() {
        navigate(Constants.ACCOUNT_DETAILS);
        return Constants.P_ACCOUNT_DETAILS;
    }

    public boolean isAgencyConsole() {
        Object request = FacesContext.getCurrentInstance().getExternalContext().getRequest();
        if (request instanceof HttpServletRequest) {
            return (((HttpServletRequest) request).getRequestURL().toString().contains("agencyconsole") || ((HttpServletRequest) request)
                    .getRequestURL().toString().contains("manageusers"));
        }
        return false;
    }

    @Override
    protected void init() {
        menuStyleClass.clear();
        menuStyleClass.put("dashboard", "currentPage");
    }

}
